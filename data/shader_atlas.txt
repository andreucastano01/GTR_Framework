//example of some shaders compiled
flat basic.vs flat.fs
texture basic.vs texture.fs
gbuffers basic.vs gbuffers.fs
deferred quad.vs deferred.fs
sphere_deferred basic.vs sphere_deferred.fs
singlepass basic.vs singlepass.fs
multipass basic.vs multipass.fs
depth quad.vs depth.fs
multi basic.vs multi.fs

\encodenormalmap

mat3 cotangent_frame(vec3 N, vec3 p, vec2 uv)
{
	// get edge vectors of the pixel triangle
	vec3 dp1 = dFdx(p);
	vec3 dp2 = dFdy(p);
	vec2 duv1 = dFdx(uv);
	vec2 duv2 = dFdy(uv);
	
	// solve the linear system
	vec3 dp2perp = cross(dp2, N);
	vec3 dp1perp = cross(N, dp1);
	vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
	vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;
 
	// construct a scale-invariant frame 
	float invmax = inversesqrt(max(dot(T,T), dot(B,B)));
	return mat3(T * invmax, B * invmax, N);
}

// assume N, the interpolated vertex normal and 
// WP the world position
//vec3 normal_pixel = texture2D(normalmap, uv).xyz; 
vec3 perturbNormal(vec3 N, vec3 WP, vec2 uv, vec3 normal_pixel)
{
	normal_pixel = normal_pixel * 255./127. - 128./127.;
	mat3 TBN = cotangent_frame(N, WP, uv);
	return normalize(TBN * normal_pixel);
}

\encodeshadowmap

uniform int u_light_cast_shadows;
uniform sampler2D u_light_shadowmap;
uniform mat4 u_light_shadowmap_vp;
uniform float u_light_shadow_bias;

float testShadowMap(vec3 pos){
	//project our 3D position to the shadowmap
	vec4 proj_pos = u_light_shadowmap_vp * vec4(pos,1.0);

	//from homogeneus space to clip space
	vec2 shadow_uv = proj_pos.xy / proj_pos.w;

	//from clip space to uv space
	shadow_uv = shadow_uv * 0.5 + vec2(0.5);

	//get point depth [-1 .. +1] in non-linear space
	float real_depth = (proj_pos.z - u_light_shadow_bias) / proj_pos.w;

	//normalize from [-1..+1] to [0..+1] still non-linear
	real_depth = real_depth * 0.5 + 0.5;

	//read depth from depth buffer in [0..+1] non-linear
	float shadow_depth = texture(u_light_shadowmap, shadow_uv).x;

	//compute final shadow factor by comparing
	float shadow_factor = 1.0;

	//we can compare them, even if they are not linear
	if( shadow_depth < real_depth )
		shadow_factor = 0.0;

	if(u_light_type == 0){
		//it is outside on the sides
		if( shadow_uv.x < 0.0 || shadow_uv.x > 1.0 || shadow_uv.y < 0.0 || shadow_uv.y > 1.0 )
			shadow_factor = 1.0;

		//it is before near or behind far plane
		if(real_depth < 0.0 || real_depth > 1.0)
			shadow_factor = 1.0;
	}

	return shadow_factor;
}

\basic.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;
in vec4 a_color;

uniform vec3 u_camera_pos;

uniform mat4 u_model;
uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;
out vec4 v_color;

uniform float u_time;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( v_position, 1.0) ).xyz;
	
	//store the color in the varying var to use it from the pixel shader
	v_color = a_color;

	//store the texture coordinates
	v_uv = a_coord;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}

\quad.vs

#version 330 core

in vec3 a_vertex;
in vec2 a_coord;
out vec2 v_uv;

void main()
{	
	v_uv = a_coord;
	gl_Position = vec4( a_vertex, 1.0 );
}


\flat.fs

#version 330 core

uniform vec4 u_color;

out vec4 FragColor;

void main()
{
	FragColor = u_color;
}


\texture.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

out vec4 FragColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	FragColor = color;
}

\gbuffers.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;
uniform int dither;

uniform vec3 u_emissive_factor;
uniform sampler2D u_texture_emissive;
uniform sampler2D u_texture_occlusion;
uniform int u_have_occlusion_texture;

uniform sampler2D u_texture_normal;
uniform int u_have_normal_texture;

layout(location = 0) out vec4 GB0;
layout(location = 1) out vec4 GB1;
layout(location = 2) out vec4 GB2;

#include "encodenormalmap"

float dither4x4(vec2 position, float brightness)
{
  int x = int(mod(position.x, 4.0));
  int y = int(mod(position.y, 4.0));
  int index = x + y * 4;
  float limit = 0.0;

  if (x < 8) {
    if (index == 0) limit = 0.0625;
    if (index == 1) limit = 0.5625;
    if (index == 2) limit = 0.1875;
    if (index == 3) limit = 0.6875;
    if (index == 4) limit = 0.8125;
    if (index == 5) limit = 0.3125;
    if (index == 6) limit = 0.9375;
    if (index == 7) limit = 0.4375;
    if (index == 8) limit = 0.25;
    if (index == 9) limit = 0.75;
    if (index == 10) limit = 0.125;
    if (index == 11) limit = 0.625;
    if (index == 12) limit = 1.0;
    if (index == 13) limit = 0.5;
    if (index == 14) limit = 0.875;
    if (index == 15) limit = 0.375;
  }

  return brightness < limit ? 0.0 : 1.0;
}


void main()
{
	vec3 N;
	if(u_have_normal_texture == 1){
		vec3 normal_pixel = texture2D(u_texture_normal, v_uv).xyz;
		N = normalize(perturbNormal(v_normal, v_world_position, v_uv, normal_pixel));
	}
	if(u_have_normal_texture == 0){
		N = normalize(v_normal);
	}
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture(u_texture, v_uv);

	if(color.a < u_alpha_cutoff)
		discard;

	if(dither == 1)
		if(dither4x4(gl_FragCoord.xy, color.x) == 0.0)
			discard;

	if(dither == 1){
		vec2 texSize  = textureSize(u_texture, 0).xy;
		vec2 texCoord = gl_FragCoord.xy / texSize;
		color *= texture(u_texture, texCoord);
	}

	vec4 material;
	if(u_have_occlusion_texture == 1) material = texture(u_texture_occlusion, v_uv);

	vec3 emissive_factor = u_emissive_factor;
	emissive_factor *= texture(u_texture_emissive, v_uv).xyz;


	GB0 = vec4(color.xyz, material.x);
	GB1 = vec4(N * 0.5 + vec3(0.5), material.y);
	GB2 = vec4(emissive_factor, material.z);
}

\deferred.fs

#version 330 core

in vec2 v_uv;

uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

uniform vec3 u_light_color;
uniform vec3 u_light_position;
uniform vec3 u_ambient_light;
uniform vec3 u_light_cone;
uniform vec3 u_light_front;
uniform vec3 u_light_vector;
uniform float u_light_max_distance;
uniform int u_light_type;

uniform int u_passed_emissive_factor;
uniform sampler2D u_texture_occlusion;
uniform int u_have_occlusion_texture;

uniform sampler2D u_gb0_texture;
uniform sampler2D u_gb1_texture;
uniform sampler2D u_gb2_texture;
uniform sampler2D u_depth_texture;
uniform mat4 u_inverse_viewprojection;

out vec4 FragColor;

#include "encodeshadowmap"

void main()
{
	vec2 uv = v_uv;
	vec4 gb0_color = texture(u_gb0_texture, v_uv);
	vec4 gb1_color = texture(u_gb1_texture, v_uv);
	vec4 gb2_color = texture(u_gb2_texture, v_uv);
	vec4 color = vec4(gb0_color.xyz, 1.0);

	float depth = texture( u_depth_texture, uv ).x;

	if(depth == 1.0) discard;

	vec4 screen_pos = vec4(uv.x*2.0-1.0, uv.y*2.0-1.0, depth*2.0-1.0, 1.0);
	vec4 proj_worldpos = u_inverse_viewprojection * screen_pos;
	vec3 world_position = proj_worldpos.xyz / proj_worldpos.w;

	vec3 N = normalize(gb1_color.xyz * 2.0 - vec3(1.0));
	
	vec3 ambient = u_ambient_light;
	ambient *= gb0_color.a;

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 light = ambient;
	
	vec3 L;
	float spotFactor = 1.0;
	float ShadowFactor = 1.0;

	if(u_light_type == 1) { //spot light
		L = normalize(u_light_position - world_position);
		if (u_light_cone.z > 0){
			vec3 D = normalize(u_light_front);
			float spotCosine = dot(D, -L);
			if (spotCosine >= u_light_cone.z) {
				spotFactor = pow(spotCosine, u_light_cone.y);
			} 
			else spotFactor = 0.0; // The light will add no color to the point.
		}
		if(u_light_cast_shadows == 1) ShadowFactor = testShadowMap(world_position);
	}
	
	if(u_light_type == 2) { //point light
		L = normalize(u_light_position - world_position);
	}

	float light_distance = length(u_light_position - world_position);
	float att_factor = u_light_max_distance - light_distance;
	att_factor = att_factor/u_light_max_distance;
	att_factor = max(att_factor, 0.0);
	att_factor *= pow(att_factor, 2.0);

	if(u_light_type == 0) { //directional  light
		L = normalize(u_light_vector);
		att_factor = 1.0;
		if(u_light_cast_shadows == 1) ShadowFactor = testShadowMap(world_position);
	}

	float NdotL = clamp(dot(N, L), 0.0, 1.0);
	light += NdotL * u_light_color * att_factor * spotFactor * ShadowFactor;

	color.xyz *= light;
	if(u_passed_emissive_factor == 0) color.xyz += gb2_color.xyz;
	
	FragColor = color;
}

\sphere_deferred.fs

#version 330 core

in vec2 v_uv;
uniform vec2 u_iRes;

uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

uniform vec3 u_light_color;
uniform vec3 u_light_position;
uniform vec3 u_ambient_light;
uniform vec3 u_light_cone;
uniform vec3 u_light_front;
uniform vec3 u_light_vector;
uniform float u_light_max_distance;
uniform int u_light_type;

uniform int u_passed_emissive_factor;
uniform sampler2D u_texture_occlusion;
uniform int u_have_occlusion_texture;

uniform sampler2D u_gb0_texture;
uniform sampler2D u_gb1_texture;
uniform sampler2D u_gb2_texture;
uniform sampler2D u_depth_texture;
uniform mat4 u_inverse_viewprojection;

out vec4 FragColor;

#include "encodeshadowmap"

void main()
{
	vec2 uv = gl_FragCoord.xy * u_iRes.xy;
	vec4 gb0_color = texture(u_gb0_texture, uv);
	vec4 gb1_color = texture(u_gb1_texture, uv);
	vec4 gb2_color = texture(u_gb2_texture, uv);
	vec4 color = vec4(gb0_color.xyz, 1.0);

	float depth = texture( u_depth_texture, uv ).x;
	vec4 screen_pos = vec4(uv.x*2.0-1.0, uv.y*2.0-1.0, depth*2.0-1.0, 1.0);
	vec4 proj_worldpos = u_inverse_viewprojection * screen_pos;
	vec3 world_position = proj_worldpos.xyz / proj_worldpos.w;

	vec3 N = normalize(gb1_color.xyz * 2.0 - vec3(1.0));
	
	vec3 ambient = u_ambient_light;
	ambient *= gb0_color.a;

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 light = ambient;
	
	vec3 L;
	float spotFactor = 1.0;
	float ShadowFactor = 1.0;

	if(u_light_type == 1) { //spot light
		L = normalize(u_light_position - world_position);
		if (u_light_cone.z > 0){
			vec3 D = normalize(u_light_front);
			float spotCosine = dot(D, -L);
			if (spotCosine >= u_light_cone.z) {
				spotFactor = pow(spotCosine, u_light_cone.y);
			} 
			else spotFactor = 0.0; // The light will add no color to the point.
		}
		if(u_light_cast_shadows == 1) ShadowFactor = testShadowMap(world_position);
	}
	
	if(u_light_type == 2) { //point light
		L = normalize(u_light_position - world_position);
	}

	float light_distance = length(u_light_position - world_position);
	float att_factor = u_light_max_distance - light_distance;
	att_factor = att_factor/u_light_max_distance;
	att_factor = max(att_factor, 0.0);
	att_factor *= pow(att_factor, 2.0);

	if(u_light_type == 0) { //directional  light
		L = normalize(u_light_vector);
		att_factor = 1.0;
		if(u_light_cast_shadows == 1) ShadowFactor = testShadowMap(world_position);
	}

	float NdotL = clamp(dot(N, L), 0.0, 1.0);
	light += NdotL * u_light_color * att_factor * spotFactor * ShadowFactor;

	color.xyz *= light;
	if(u_passed_emissive_factor == 0) color.xyz += gb2_color.xyz;
	
	FragColor = color;
}

\singlepass.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

uniform vec3 u_emissive_factor;
uniform sampler2D u_texture_emissive;
uniform sampler2D u_texture_normal;
uniform sampler2D u_texture_occlusion;
uniform vec3 u_ambient_light;
uniform int u_have_normal_texture;
uniform int u_have_occlusion_texture;

const int MAX_LIGHTS = 5;
uniform vec3 u_light_position[MAX_LIGHTS];
uniform vec3 u_light_color[MAX_LIGHTS];
uniform int u_light_type[MAX_LIGHTS];
uniform float u_light_max_distance[MAX_LIGHTS];
uniform vec3 u_light_cone[MAX_LIGHTS];
uniform vec3 u_light_vector[MAX_LIGHTS];
uniform vec3 u_light_front[MAX_LIGHTS];
uniform int u_num_lights;

uniform int u_light_cast_shadows[MAX_LIGHTS];
uniform sampler2D u_light_shadowmap[MAX_LIGHTS];
uniform float u_light_shadow_bias[MAX_LIGHTS];
uniform mat4 u_light_shadowmap_vp[MAX_LIGHTS];

out vec4 FragColor;

#include "encodenormalmap"

float testShadowMap(vec3 pos, int i){
	//project our 3D position to the shadowmap
	vec4 proj_pos = u_light_shadowmap_vp[i] * vec4(pos,1.0);

	//from homogeneus space to clip space
	vec2 shadow_uv = proj_pos.xy / proj_pos.w;

	//from clip space to uv space
	shadow_uv = shadow_uv * 0.5 + vec2(0.5);

	//get point depth [-1 .. +1] in non-linear space
	float real_depth = (proj_pos.z - u_light_shadow_bias[i]) / proj_pos.w;

	//normalize from [-1..+1] to [0..+1] still non-linear
	real_depth = real_depth * 0.5 + 0.5;

	//read depth from depth buffer in [0..+1] non-linear
	float shadow_depth = texture(u_light_shadowmap[i], shadow_uv).x;

	//compute final shadow factor by comparing
	float shadow_factor = 1.0;

	//we can compare them, even if they are not linear
	if( shadow_depth < real_depth )
		shadow_factor = 0.0;

	if(u_light_type[i] == 0){ //Falta arreglar la directional para las sombras
		//it is outside on the sides
		if( shadow_uv.x < 0.0 || shadow_uv.x > 1.0 || shadow_uv.y < 0.0 || shadow_uv.y > 1.0 )
			shadow_factor = 1.0;

		//it is before near or behind far plane
		if(real_depth < 0.0 || real_depth > 1.0)
			shadow_factor = 1.0;
	}

	return shadow_factor;
}

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	vec3 emissive_factor = u_emissive_factor;
	emissive_factor *= texture(u_texture_emissive, v_uv).xyz;

	vec3 N;
	if(u_have_normal_texture == 1){
		vec3 normal_pixel = texture2D(u_texture_normal, v_uv).xyz;
		N = normalize(perturbNormal(v_normal, v_world_position, v_uv, normal_pixel));
	}
	if(u_have_normal_texture == 0){
		N = normalize(v_normal);
	}

	vec3 ambient = u_ambient_light;
	if(u_have_occlusion_texture == 1){
		ambient *= texture(u_texture_occlusion, v_uv).x;
	}

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 light = ambient;
	
	for(int i = 0; i < MAX_LIGHTS; i++) {
		if(i < u_num_lights){
			vec3 L;
			float spotFactor = 1.0;
			float ShadowFactor = 1.0;

			if(u_light_type[i] == 1) { //spot light
				L = normalize(u_light_position[i] - v_world_position);
				if (u_light_cone[i].z > 0){
					vec3 D = normalize(u_light_front[i]);
					float spotCosine = dot(D, -L);
					if (spotCosine >= u_light_cone[i].z) {
						spotFactor = pow(spotCosine, u_light_cone[i].y);
					} 
					else spotFactor = 0.0; // The light will add no color to the point.
				}
				if(u_light_cast_shadows[i] == 1) ShadowFactor = testShadowMap(v_world_position, i);
			}
	
			if(u_light_type[i] == 2) { //point light
				L = normalize(u_light_position[i] - v_world_position);
			}

			float light_distance = length(u_light_position[i] - v_world_position);
			float att_factor = u_light_max_distance[i] - light_distance;
			att_factor = att_factor/u_light_max_distance[i];
			att_factor = max(att_factor, 0.0);
			att_factor *= pow(att_factor, 2.0);

			if(u_light_type[i] == 0) { //directional light
				L = normalize(u_light_vector[i]);
				att_factor = 1.0;
				//if(u_light_cast_shadows[i] == 1) ShadowFactor = testShadowMap(v_world_position, i);
			}

			float NdotL = clamp(dot(N, L), 0.0, 1.0);
			light += NdotL * u_light_color[i] * att_factor * spotFactor * ShadowFactor;
		}
	}

	color.xyz *= light;
	color.xyz += emissive_factor;

	FragColor = color;
}

\multipass.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

uniform vec3 u_light_color;
uniform vec3 u_light_position;
uniform vec3 u_ambient_light;
uniform vec3 u_light_cone;
uniform vec3 u_light_front;
uniform vec3 u_light_vector;
uniform float u_light_max_distance;
uniform int u_light_type;

uniform vec3 u_emissive_factor;
uniform sampler2D u_texture_emissive;
uniform sampler2D u_texture_normal;
uniform sampler2D u_texture_occlusion;
uniform int u_have_normal_texture;
uniform int u_have_occlusion_texture;

#include "encodenormalmap"
#include "encodeshadowmap"

out vec4 FragColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture(u_texture, v_uv);

	vec3 emissive_factor = u_emissive_factor;
	emissive_factor *= texture(u_texture_emissive, v_uv).xyz;

	vec3 N;
	if(u_have_normal_texture == 1){
		vec3 normal_pixel = texture2D(u_texture_normal, v_uv).xyz;
		N = normalize(perturbNormal(v_normal, v_world_position, v_uv, normal_pixel));
	}
	if(u_have_normal_texture == 0){
		N = normalize(v_normal);
	}
	
	vec3 ambient = u_ambient_light;
	if(u_have_occlusion_texture == 1){
		ambient *= texture(u_texture_occlusion, v_uv).x;
	}

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 light = ambient;
	
	vec3 L;
	float spotFactor = 1.0;
	float ShadowFactor = 1.0;

	if(u_light_type == 1) { //spot light
		L = normalize(u_light_position - v_world_position);
		if (u_light_cone.z > 0){
			vec3 D = normalize(u_light_front);
			float spotCosine = dot(D, -L);
			if (spotCosine >= u_light_cone.z) {
				spotFactor = pow(spotCosine, u_light_cone.y);
			} 
			else spotFactor = 0.0; // The light will add no color to the point.
		}
		if(u_light_cast_shadows == 1) ShadowFactor = testShadowMap(v_world_position);
	}
	
	if(u_light_type == 2) { //point light
		L = normalize(u_light_position - v_world_position);
	}

	float light_distance = length(u_light_position - v_world_position);
	float att_factor = u_light_max_distance - light_distance;
	att_factor = att_factor/u_light_max_distance;
	att_factor = max(att_factor, 0.0);
	att_factor *= pow(att_factor, 2.0);

	if(u_light_type == 0) { //directional  light
		L = normalize(u_light_vector);
		att_factor = 1.0;
		if(u_light_cast_shadows == 1) ShadowFactor = testShadowMap(v_world_position);
	}

	float NdotL = clamp(dot(N, L), 0.0, 1.0);
	light += NdotL * u_light_color * att_factor * spotFactor * ShadowFactor;

	color.xyz *= light;
	color.xyz += emissive_factor;

	FragColor = color;
}


\multi.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

layout(location = 0) out vec4 FragColor;
layout(location = 1) out vec4 NormalColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, uv );

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 N = normalize(v_normal);

	FragColor = color;
	NormalColor = vec4(N,1.0);
}


\depth.fs

#version 330 core

uniform vec2 u_camera_nearfar;
uniform sampler2D u_texture; //depth map
in vec2 v_uv;
out vec4 FragColor;

void main()
{
	float n = u_camera_nearfar.x;
	float f = u_camera_nearfar.y;
	float z = texture2D(u_texture,v_uv).x;
	float color = n * (z + 1.0) / (f + n - z * (f - n));
	FragColor = vec4(color);
}


\instanced.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;

in mat4 u_model;

uniform vec3 u_camera_pos;

uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( a_vertex, 1.0) ).xyz;
	
	//store the texture coordinates
	v_uv = a_coord;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}